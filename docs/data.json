{
    "project": {
        "name": "Ash Framework",
        "description": "The Foo API: a library for doing X, Y, and Z",
        "version": "0.0.1",
        "url": "http://example.com/"
    },
    "files": {
        "src/classes/application.js": {
            "name": "src/classes/application.js",
            "modules": {},
            "classes": {
                "Application": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/base.js": {
            "name": "src/classes/base.js",
            "modules": {},
            "classes": {
                "Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/error-handler.js": {
            "name": "src/classes/error-handler.js",
            "modules": {},
            "classes": {
                "ErrorHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/http.js": {
            "name": "src/classes/http.js",
            "modules": {},
            "classes": {
                "Http": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/initializer.js": {
            "name": "src/classes/initializer.js",
            "modules": {},
            "classes": {
                "Initializer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/inject.js": {
            "name": "src/classes/inject.js",
            "modules": {},
            "classes": {
                "Inject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/middleware-router.js": {
            "name": "src/classes/middleware-router.js",
            "modules": {},
            "classes": {
                "MiddlewareRouter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/middleware.js": {
            "name": "src/classes/middleware.js",
            "modules": {},
            "classes": {
                "Middleware": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/mixin.js": {
            "name": "src/classes/mixin.js",
            "modules": {},
            "classes": {
                "Mixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/route.js": {
            "name": "src/classes/route.js",
            "modules": {},
            "classes": {
                "Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/router.js": {
            "name": "src/classes/router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/classes/service.js": {
            "name": "src/classes/service.js",
            "modules": {},
            "classes": {
                "Service": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Application": {
            "name": "Application",
            "shortname": "Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/application.js",
            "line": 15,
            "description": "Application class used to create a new instance of an Ash application\nvia the static method `start`",
            "extends": "Base"
        },
        "Base": {
            "name": "Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/base.js",
            "line": 27,
            "description": "Ash framework base class.\n\nThis class is the base class for all Ash classes. It adds support for mixins in all\nchild classes."
        },
        "ErrorHandler": {
            "name": "ErrorHandler",
            "shortname": "ErrorHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/error-handler.js",
            "line": 5,
            "extends": "Http"
        },
        "Http": {
            "name": "Http",
            "shortname": "Http",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/http.js",
            "line": 6,
            "description": "Extends Base to add Http request and response properties",
            "extends": "Base"
        },
        "Initializer": {
            "name": "Initializer",
            "shortname": "Initializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/initializer.js",
            "line": 5,
            "extends": "Base"
        },
        "Inject": {
            "name": "Inject",
            "shortname": "Inject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/inject.js",
            "line": 6,
            "access": "private",
            "tagname": ""
        },
        "MiddlewareRouter": {
            "name": "MiddlewareRouter",
            "shortname": "MiddlewareRouter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/middleware-router.js",
            "line": 5,
            "extends": "Base"
        },
        "Middleware": {
            "name": "Middleware",
            "shortname": "Middleware",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/middleware.js",
            "line": 5,
            "extends": "Http"
        },
        "Mixin": {
            "name": "Mixin",
            "shortname": "Mixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/mixin.js",
            "line": 5,
            "extends": "Base"
        },
        "Route": {
            "name": "Route",
            "shortname": "Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/route.js",
            "line": 7,
            "extends": "Http"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/router.js",
            "line": 5,
            "extends": "Base"
        },
        "Service": {
            "name": "Service",
            "shortname": "Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/classes/service.js",
            "line": 5,
            "extends": "Base"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/classes/application.js",
            "line": 23,
            "description": "## Starts an Ash application\nStarts application by performing the following operations\n\n### 1. runs initializers\nRuns initializer classes in app/initializers (if any) in alphabetical order.\nInializers can be used to hook into app start up early on and gain access\nto the express app instance in case you need to perform operations\noutside the scope of the Ash framework.\n\n#### Example: adding an initializer\n```\n\n// app/initializers/application.js\nconst Ash = require('@ash-framework/ash')\n\nmodule.exports = class Initializer extends Ash.Initializer {\n  init (app) {\n    // app is an unmodified express app instance so you can\n    // do the following.\n    app.get('/animals/mice', function (req, res) {\n      res.send('Success')\n    })\n  }\n}\n```\n\n### 2. loads middleware\nReads app/middleware.js to determine which middleware to run and in what order.\nReads in and runs any middleware specified in app/middleware.js from the app/middleware directory\n\n#### Example: creating middleware\n```\n\n// app/middleware/access.js\nconst Ash = require('@ash-framework/ash')\n\nmodule.exports = class AccessMiddleware extends Ash.Middleware {\n  register () {\n\n  }\n}\n```\n\n#### Example: registering middleware\n```\n\n// app/middleware.js\nconst Ash = require('@ash-framework/ash')\n\nclass MiddlewareRouter extends Ash.MiddlewareRouter { }\n\nMiddlewareRouter.map(function () {\n  this.middleware('access')\n})\n\nmodule.exports = MiddlewareRouter\n```\n\n### 3. creates routes\nReads app/router.js to determine which routes to register.\nReads in and registers any routes specified in app/router.js from the app/routes directory\n\n#### Example: creating a route\n```\n\n// app/routes/user.js\nconst Ash = require('@ash-framework/ash')\n\nmodule.exports = class UserRoute extends Ash.Route {\n  model () {\n    // return user data\n  }\n}\n```\n\n#### Example: registering route in the router\n```\n\n// app/router.js\nconst Ash = require('@ash-framework/ash')\n\nclass Router extends Ash.Router { }\n\nRouter.map(function () {\n  this.route('user')\n})\n\nmodule.exports = Router\n```\n\n### 4. adds an error handler\nThis error handler catches any errors and specifies how errors should be handled and\ndisplayed to the client.\n\nLooks for a user defined error handler class for the application in app/error-handler.js\nIf not found one is defined in its place.\n\n#### Example: adding a custom error handler\n```\n\n// app/error-handler.js\nconst {ErrorHandler, log} = require('@ash-framework/ash')\n\nmodule.exports = class ApplicationErrorHandler extends ErrorHandler {\n  error (error) {\n    log.error(error)\n    super.error(error)\n  }\n}\n```\n\n### 5. starts the app\nStarts the app on the port described in `config/environment.js`. The default port is 3010.\n\n#### Example: starting an application:\n```\n\nconst Ash = require('@ash-framework/ash')\n\nclass Application extends Ash.Application {\n}\n\nApplication.start()\n```",
            "static": 1,
            "itemtype": "method",
            "name": "start",
            "class": "Application"
        },
        {
            "file": "src/classes/base.js",
            "line": 36,
            "description": "Constructor sets up mixins.\n\nWhen overriding the constructor, remember to call `super()`",
            "itemtype": "method",
            "name": "constructor",
            "is_constructor": 1,
            "class": "Base"
        },
        {
            "file": "src/classes/base.js",
            "line": 48,
            "description": "Defines mixins for class.\n\nGets passed a `register` function that\ncan be called to mix mixin class methods in.\n\nCall register multiple times to mixin multiple mixins.\n\n```\nclass MyMixin1 {\n  method1 () {}\n}\n\nclass MyMixin2 {\n  method2 () {}\n}\n\nclass MyClass extends Ash.Base {\n  static mixins(register) {\n    register(MyMixin1)\n    register(MyMixin2)\n  }\n}\n```\n\nInstantiating `MyClass` will result in an object with methods `method1` and `method2` mixed in.",
            "itemtype": "method",
            "name": "mixins",
            "static": 1,
            "params": [
                {
                    "name": "register",
                    "description": "- mixin registration function. Can be called multiple times to register\nadditional mixins.",
                    "type": "Function"
                }
            ],
            "class": "Base"
        },
        {
            "file": "src/classes/error-handler.js",
            "line": 10,
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ErrorHandler"
        },
        {
            "file": "src/classes/http.js",
            "line": 13,
            "itemtype": "property",
            "name": "request",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 17,
            "itemtype": "property",
            "name": "response",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 21,
            "itemtype": "property",
            "name": "body",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 25,
            "itemtype": "property",
            "name": "params",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 29,
            "itemtype": "property",
            "name": "query",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 33,
            "itemtype": "property",
            "name": "headers",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 37,
            "itemtype": "property",
            "name": "method",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 41,
            "itemtype": "method",
            "name": "constructor",
            "is_constructor": 1,
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 65,
            "itemtype": "method",
            "name": "services",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 72,
            "itemtype": "method",
            "name": "accepts",
            "class": "Http"
        },
        {
            "file": "src/classes/http.js",
            "line": 79,
            "itemtype": "method",
            "name": "is",
            "class": "Http"
        },
        {
            "file": "src/classes/initializer.js",
            "line": 10,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "app",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Initializer"
        },
        {
            "file": "src/classes/inject.js",
            "line": 11,
            "itemtype": "method",
            "name": "service",
            "static": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "serviceName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Inject"
        },
        {
            "file": "src/classes/middleware-router.js",
            "line": 10,
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
                {
                    "name": "definition",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "MiddlewareRouter"
        },
        {
            "file": "src/classes/route.js",
            "line": 12,
            "itemtype": "method",
            "name": "constructor",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 23,
            "itemtype": "method",
            "name": "hasMiddleware",
            "access": "private",
            "tagname": "",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 31,
            "itemtype": "method",
            "name": "registeredMiddleware",
            "access": "private",
            "tagname": "",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 39,
            "itemtype": "method",
            "name": "middleware",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 46,
            "itemtype": "method",
            "name": "deserialize",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 53,
            "itemtype": "method",
            "name": "beforeModel",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 60,
            "itemtype": "method",
            "name": "model",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 67,
            "itemtype": "method",
            "name": "afterModel",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 74,
            "itemtype": "method",
            "name": "serialize",
            "class": "Route"
        },
        {
            "file": "src/classes/route.js",
            "line": 81,
            "itemtype": "method",
            "name": "error",
            "class": "Route"
        },
        {
            "file": "src/classes/router.js",
            "line": 10,
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
                {
                    "name": "definition",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Router"
        }
    ],
    "warnings": []
}